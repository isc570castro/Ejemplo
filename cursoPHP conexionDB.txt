GIT
git init //Para comenzar a monitoriar el proyecto, con este comando se crea el master
git clone https://gitlab.com/romanperez/ejercicio1PHP.git (para clonar proyecto)
git branch //para ver las ramas actuales
git branch nombre_rama_nueva - para hacer una nueva rama 
git branch -A //Ver todas las ramas hasta la rama oculta (origin/master)
git checkout master (cambiar de rama en vez de master se escribe la rama que quieres cambiarte)
git status- para ver estados en la rama (lo que se ha modificado o agrado)
git add . (agregar todo)
git add archivoasubir.extenciondelarchivo //Para agregar un archivo especifico
git commit -m "Comentario" (Agregar comentario de lo que hizo)
git commit --amend -m "Cambio de comentario" //Cambiar el comentario del ultimo commit
git push origin formularios_ACS //Enviar la rama a github
git push origin -f //Forsar un envio a github
git pull origin master (actualizar las ramas que hay en el master)
git branch -D nombre_rama     - Para eliminar una rama GIT
git log //Para ver todos los commit realizados y su codigo encriptado
git checkout codigoencriptadodelcomit //Para viajar al commit que decemos para checar codigo anterior
git checkout master //Volver al ultimo commit 
git reset --soft codigocomit //Elimina el commit pero no toca el codigo 
git reset --mixed //
git reset --hard //Borra todo y comits y todo
git log > commits.txt //Crea un archivo txt de todos los comit

git remote add origin https://github.com/isc570castro/Ejemplo.git //Conectar un proyecto que ya esta hecho a github
git remote -v //Para ver en que repositorio estamos trabajando
git remote remove origin //Para quitar la conexion del repositorio al que estamos apuntados

Para fusionar ramas:
1.- Posicionarse en la rama que va a abosrver la rama, en este caso master
2.- git merge ramaAabsorver

Para elimar una rama que no funciono o ya no se ocupa:
1.- Posicionarse en master
2.- git branch -D nombreramaquenofunciono


WORKFLOWS
Para obtener los cambios que un miembro ha realizado en github
1.- git fetch origin //Para pasar los cambios a la rama oculta
2.- git marge origin/master //Pasar los cambios de la rama oculta a la rama master
3.- Ahora ya se tiene que tener los cambios con los comits que el miembro del equipo ha realizado

TAGS
git tag -a v0.8 -m "Version 0.8 de nuestro proyecto"  //Asginar una version al ultimo commit realizado
git tag -a v0-1 -m "Version 0.1 de nuestro proyecto " c78cb0bfd985e6ca0d48e403f70f6944eb8db5bb //Asignar una version a un commit especifico
git push origin v0.8 //Subir un tag a github
git push origin --tags //Para subir todos las tags

Notas:
Pueden haber 50 commits y el 50 puede ser la version 1 de pende como se requiera

No se pueden subir cambios si ya hay cambios en el github de otro miembro  para esto
hay que realizar WORKFLOWS

Cuando hay un conflicto al descargar los cambios realizados por otro miembro es porque se
trabajo con las mismas lineas por lo que hay que checar el codigo y donde dice HEAD es nuestro codigo
y donde dice origin/master es el codigo que estamos descargando,  hay que dejar el que nos sirva 
y hacer un commit nosotros y un push para mandar el nuevo codigo corregido y el usuario que habia realizado
esos cambiso que se descargaron con conflictos debe volver a descargar el codigo corregido con 
los puntos de workflow

DOMINIOS CON GITHUB

Crear repositorio con los siguientes parametros
nombredeusuariouorganizacion.github.io
Crear git branch gh-pages